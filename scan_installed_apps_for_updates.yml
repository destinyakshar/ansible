---
- name: Scan installed applications for updates on Windows target nodes (without Chocolatey)
  hosts: winsys
  gather_facts: no
  tasks:
    - name: Get list of installed applications and their versions
      win_shell: |
        Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* |
        Select-Object DisplayName, DisplayVersion |
        Where-Object { $_.DisplayName -ne $null } |
        ForEach-Object {
          [PSCustomObject]@{
            Name    = $_.DisplayName
            Version = $_.DisplayVersion
          }
        } | ConvertTo-Json
      register: installed_apps

    - name: Set installed applications fact
      set_fact:
        installed_apps_list: "{{ installed_apps.stdout | from_json }}"

    - name: Display installed applications and their versions
      debug:
        var: installed_apps_list

    - name: Check for latest versions of installed applications (using custom logic)
      win_shell: |
        $apps = {{ installed_apps_list | to_json }}
        $results = @()
        foreach ($app in $apps) {
          # Placeholder logic to fetch the latest version (replace with your own logic)
          $latestVersion = "Unknown"  # Default value
          if ($app.Name -match "Google Chrome") {
            $latestVersion = (Invoke-WebRequest -Uri "https://omahaproxy.appspot.com/all.json" -UseBasicParsing | ConvertFrom-Json)[0].versions[0].version
          } elseif ($app.Name -match "VLC") {
            $latestVersion = (Invoke-WebRequest -Uri "https://api.github.com/repos/videolan/vlc/releases/latest" -UseBasicParsing | ConvertFrom-Json).tag_name
          }
          $results += [PSCustomObject]@{
            Name           = $app.Name
            CurrentVersion = $app.Version
            LatestVersion  = $latestVersion
          }
        }
        $results | ConvertTo-Json
      register: app_updates
      when: installed_apps_list | length > 0

    - name: Display application updates information
      debug:
        var: app_updates.stdout
