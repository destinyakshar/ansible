---
- name: List all installed applications and check for updates on Windows target nodes
  hosts: winsys
  gather_facts: no
  tasks:
    - name: Get list of all installed applications and their versions
      win_shell: |
        # Get 64-bit applications
        $64bitApps = Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\* |
          Select-Object DisplayName, DisplayVersion |
          Where-Object { $_.DisplayName -ne $null }

        # Get 32-bit applications
        $32bitApps = Get-ItemProperty HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* |
          Select-Object DisplayName, DisplayVersion |
          Where-Object { $_.DisplayName -ne $null }

        # Combine both lists and remove duplicates
        $allApps = ($64bitApps + $32bitApps) | Sort-Object DisplayName -Unique

        # Convert to JSON
        $allApps | ConvertTo-Json
      register: installed_apps

    - name: Set installed applications fact
      set_fact:
        installed_apps_list: "{{ installed_apps.stdout | from_json }}"

    - name: Display installed applications and their versions
      debug:
        var: installed_apps_list

    - name: Check for latest versions of installed applications (using custom logic)
      win_shell: |
        # Convert the JSON input to a PowerShell object
        $apps = '{{ installed_apps_list | to_json }}' | ConvertFrom-Json

        $results = @()
        foreach ($app in $apps) {
          # Fetch the current version
          $currentVersion = $app.DisplayVersion

          # Placeholder logic to fetch the latest version (replace with your own logic)
          $latestVersion = "Unknown"  # Default value

          # Example: Fetch latest version for Google Chrome
          if ($app.DisplayName -match "Google Chrome") {
            try {
              $latestVersion = (Invoke-WebRequest -Uri "https://omahaproxy.appspot.com/all.json" -UseBasicParsing | ConvertFrom-Json)[0].versions[0].version
            } catch {
              $latestVersion = "Error fetching version"
            }
          }

          # Example: Fetch latest version for VLC
          elseif ($app.DisplayName -match "VLC") {
            try {
              $latestVersion = (Invoke-WebRequest -Uri "https://api.github.com/repos/videolan/vlc/releases/latest" -UseBasicParsing | ConvertFrom-Json).tag_name
            } catch {
              $latestVersion = "Error fetching version"
            }
          }

          # Add the result to the array
          $results += [PSCustomObject]@{
            Name           = $app.DisplayName
            CurrentVersion = $currentVersion
            LatestVersion  = $latestVersion
          }
        }

        # Output the results as JSON
        $results | ConvertTo-Json
      register: app_updates
      when: installed_apps_list | length > 0

    - name: Display application updates information
      debug:
        var: app_updates.stdout
